{"ast":null,"code":"var _jsxFileName = \"/Users/alim/Documents/Coding/WebCoachAI/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport ChatPage from './pages/ChatPage';\nimport LoginPage from './pages/login';\nimport { API_BASE_URL } from './config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [chats, setChats] = useState([]);\n  const [activeChat, setActiveChat] = useState(null);\n  useEffect(() => {\n    checkAuthStatus();\n  }, [checkAuthStatus]);\n  const checkAuthStatus = useCallback(async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/check-auth`, {\n        credentials: 'include'\n      });\n      if (response.ok) {\n        setIsAuthenticated(true);\n        fetchChats();\n      }\n    } catch (error) {\n      console.error('Auth check failed:', error);\n    }\n  }, []);\n  const handleLoginSuccess = userId => {\n    setIsAuthenticated(true);\n    fetchChats();\n  };\n  const fetchChats = async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/chats`, {\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Failed to fetch chats');\n      const data = await response.json();\n      setChats(data.chats);\n    } catch (error) {\n      console.error('Error fetching chats:', error);\n    }\n  };\n  const createNewChat = async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/chat`, {\n        method: 'POST',\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Failed to create new chat');\n      const data = await response.json();\n      setChats(prevChats => [...prevChats, {\n        id: data.chat_id,\n        messages: []\n      }]);\n      setActiveChat(data.chat_id);\n    } catch (error) {\n      console.error('Error creating new chat:', error);\n    }\n  };\n  const addMessage = async (chatId, message) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/chat/${chatId}/message`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message\n        }),\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Failed to send message');\n      const data = await response.json();\n      setChats(prevChats => prevChats.map(chat => chat.id === chatId ? {\n        ...chat,\n        messages: [...chat.messages, {\n          text: message,\n          sender: 'user'\n        }, {\n          text: data.ai_response,\n          sender: 'ai'\n        }]\n      } : chat));\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n  const handleLogout = async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/logout`, {\n        method: 'POST',\n        credentials: 'include'\n      });\n      if (response.ok) {\n        setIsAuthenticated(false);\n        setChats([]);\n        setActiveChat(null);\n      }\n    } catch (error) {\n      console.error('Logout failed:', error);\n    }\n  };\n  if (!isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(LoginPage, {\n      onLoginSuccess: handleLoginSuccess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(ChatPage, {\n      chats: chats,\n      activeChat: activeChat,\n      setActiveChat: setActiveChat,\n      createNewChat: createNewChat,\n      addMessage: addMessage,\n      onLogout: handleLogout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"XYFx1Ni8TyOITiH+a3RUJyPE5Ik=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","ChatPage","LoginPage","API_BASE_URL","jsxDEV","_jsxDEV","App","_s","isAuthenticated","setIsAuthenticated","chats","setChats","activeChat","setActiveChat","checkAuthStatus","response","fetch","credentials","ok","fetchChats","error","console","handleLoginSuccess","userId","Error","data","json","createNewChat","method","prevChats","id","chat_id","messages","addMessage","chatId","message","headers","body","JSON","stringify","map","chat","text","sender","ai_response","handleLogout","onLoginSuccess","fileName","_jsxFileName","lineNumber","columnNumber","className","children","onLogout","_c","$RefreshReg$"],"sources":["/Users/alim/Documents/Coding/WebCoachAI/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport ChatPage from './pages/ChatPage';\nimport LoginPage from './pages/login';\nimport { API_BASE_URL } from './config';\n\nfunction App() {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [chats, setChats] = useState([]);\n  const [activeChat, setActiveChat] = useState(null);\n\n  useEffect(() => {\n    checkAuthStatus();\n  }, [checkAuthStatus]);\n\n  const checkAuthStatus = useCallback(async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/check-auth`, {\n        credentials: 'include',\n      });\n      if (response.ok) {\n        setIsAuthenticated(true);\n        fetchChats();\n      }\n    } catch (error) {\n      console.error('Auth check failed:', error);\n    }\n  }, []);\n\n  const handleLoginSuccess = (userId) => {\n    setIsAuthenticated(true);\n    fetchChats();\n  };\n\n  const fetchChats = async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/chats`, {\n        credentials: 'include',\n      });\n      if (!response.ok) throw new Error('Failed to fetch chats');\n      const data = await response.json();\n      setChats(data.chats);\n    } catch (error) {\n      console.error('Error fetching chats:', error);\n    }\n  };\n\n  const createNewChat = async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/chat`, {\n        method: 'POST',\n        credentials: 'include',\n      });\n      if (!response.ok) throw new Error('Failed to create new chat');\n      const data = await response.json();\n      setChats(prevChats => [...prevChats, { id: data.chat_id, messages: [] }]);\n      setActiveChat(data.chat_id);\n    } catch (error) {\n      console.error('Error creating new chat:', error);\n    }\n  };\n\n  const addMessage = async (chatId, message) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/chat/${chatId}/message`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ message }),\n        credentials: 'include',\n      });\n      if (!response.ok) throw new Error('Failed to send message');\n      const data = await response.json();\n      setChats(prevChats => \n        prevChats.map(chat => \n          chat.id === chatId \n            ? { ...chat, messages: [...chat.messages, { text: message, sender: 'user' }, { text: data.ai_response, sender: 'ai' }] }\n            : chat\n        )\n      );\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n\n  const handleLogout = async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/logout`, {\n        method: 'POST',\n        credentials: 'include',\n      });\n      if (response.ok) {\n        setIsAuthenticated(false);\n        setChats([]);\n        setActiveChat(null);\n      }\n    } catch (error) {\n      console.error('Logout failed:', error);\n    }\n  };\n\n  if (!isAuthenticated) {\n    return <LoginPage onLoginSuccess={handleLoginSuccess} />;\n  }\n\n  return (\n    <div className=\"App\">\n      <ChatPage \n        chats={chats} \n        activeChat={activeChat}\n        setActiveChat={setActiveChat}\n        createNewChat={createNewChat}\n        addMessage={addMessage}\n        onLogout={handleLogout}\n      />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}